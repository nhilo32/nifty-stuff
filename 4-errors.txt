stages:
  - build_and_push
  - sign
  - update_database

Build and Push:
  stage: build_and_push
  image:
    name: 040402472214.dkr.ecr.us-gov-west-1.amazonaws.com/kaniko:latest
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"registry1.dso.mil\":{\"auth\":\"$(printf "%s:%s" "$ROBOT_CRED_USERNAME" "$ROBOT_CRED_PASSWORD" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - echo $PROJECT_ID
    - echo $REPO_URL
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $REPO_URL$PROJECT_ID
      --digest-file=./digest
  artifacts:
    paths:
      - digest
    expire_in: 1 hour
  only:
    - main

Sign:
  stage: sign
  image: 040402472214.dkr.ecr.us-gov-west-1.amazonaws.com/cosign:latest
  script:
    - aws ecr get-login-password --region us-gov-west-1 > ./pass
    - aws kms get-public-key --key-id $COSIGN_KMS_KEY > cosign.pub
    - public_key_base64=$(jq -r .PublicKey cosign.pub)
    - echo "-----BEGIN PUBLIC KEY-----" > cosign_pub.pem
    - echo "$public_key_base64" | fold -w 64 >> cosign_pub.pem
    - echo "-----END PUBLIC KEY-----" >> cosign_pub.pem
    - cosign login -u AWS -p $(cat ./pass) $(echo $REPO_URL | sed 's/\///g')
    - TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    - cosign sign --key awskms:///$COSIGN_KMS_KEY $REPO_URL$PROJECT_ID@$(cat ./digest) --tlog-upload=false -y
    - echo $TIMESTAMP > ./sign_timestamp
    - cosign verify --key cosign_pub.pem $REPO_URL$PROJECT_ID@$(cat ./digest) --private-infrastructure=true > verify
    - cosign download signature $REPO_URL$PROJECT_ID@$(cat ./digest) > signature
  artifacts:
    paths:
      - verify
      - signature
      - sign_timestamp
    expire_in: 1 hour
  only:
    - main

update_database:
  stage: update_database
  image: 040402472214.dkr.ecr.us-gov-west-1.amazonaws.com/cosign:latest
  dependencies:
    - Build and Push
    - Sign
  script:
    - cat digest
    - cat sign_timestamp
    - |
      TIMESTAMP=$(cat sign_timestamp)
      REPO_NAME=$PROJECT_ID
      HASH_DIGEST=$(cat digest)
      SIGNATURE_PAYLOAD=$(cat signature | jq .Payload)
      ENCODED_SIGNATURE=$(cat signature | jq .Base64Signature)
      JSON=$(cat <<EOF
        {
          "RepoName": {"S": "$REPO_NAME"},
          "HashDigest": {"S": "$HASH_DIGEST"},
          "Timestamp": {"S": "$TIMESTAMP"},
          "SignaturePayload": {"S": $SIGNATURE_PAYLOAD},
          "EncodedSignature": {"S": $ENCODED_SIGNATURE}
        }
      EOF
      )
      aws dynamodb put-item \
      --table-name ImageSignatures \
      --item "$JSON" \
      --return-consumed-capacity TOTAL
    - echo "Updated DynamoDB with repo name $REPO_NAME, hash digest $HASH_DIGEST, timestamp $TIMESTAMP"
  only:
    - main

